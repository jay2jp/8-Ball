/**
  The Team class creates an array of TeamMembers.
 @author Lauren Sousa  
 */
public class Team 
{
   private final int NOT_FOUND = -1;
   private final int GROW_SIZE = 4; //initial and grow size
   private TeamMember [] team;
   private int numMembers;
   
   /**
    Creates a Team, an array of TeamMembers with 4 elements.
    */
   
   public Team()
   {
      //this is the default constructor
	  this.team = new TeamMember[4];
   }
   
   /**
    Finds the TeamMember m within the Team array.
    @param TeamMember to be found within the Team array
    @return the index of the TeamMember found
    */
   
   private int find(TeamMember m)
   {
	   int i;
       for(i = 0; team.length; i++){
    	   if(team[i].equals(m)){
    		   return i;
    	   }
       } 
       return NOT_FOUND; 
   }
   
   /**
    Increases the current Team array size by four elements. 
    Copies all the data stored in Team to a new array that is larger by four elements. 
    Sets Team equal to the larger array.
    */
   
   private void grow()
   {
       int newLength = team.length + GROW_SIZE; 
       TeamMember[] newTeam = new TeamMember[newLength];
       
       int i;
       for( i = 0; i < team.length; i++){
    	   newTeam[i] = team[i];
       }
       
       this.team = newTeam;
       
   }
   
   /**
    Checks if Team has any TeamMembers.
    @returns true if all elements of the team are null, false otherwise
    */
   
   public boolean isEmpty()
   {
	   int i; 
	   for(i = 0; i < team.length; i++){
		   if(team[i] != null){
			   return false;
		   }
	   }
	   return true; 
   }
   
   /**
    Adds given TeamMember to the Team array.
    Checks if there is an element on the Team array available, and calls the grow() method if not.
    @param TeamMember to be added to the Team array
    */
   
   public void add(TeamMember m)
   {     
	   numMembers++;
	   
	   int i;
	   for(i = 0; i < team.length; i++){ //add TeamMember m to the team
		   if(team[i] == null){
			   team[i] = m; 
			   return;
		   }
	   }
	   this.team.grow(); //grow team if team array is full
	   team[i+1] = m;
	   return;
		  
	   }

   /**
    Removes given TeamMember from the Team array.
    Moves last item in the array to the given TeamMember's index.
    Sets reference of last item to null.
    @param TeamMember to be removed from the Team
    @return true once TeamMember is removed
    */

   public boolean remove(TeamMember m)
   {
	   numMembers--;
	   int removeIndex = this.team.find(m);
	   
	   team[removeIndex] = team[numMembers-1];
	   team[numMembers-1] = null;
	   return true;    
   } 
   
   /**
    Checks if the given TeamMember is conatined in the Team array
    @param TeamMember to be found in the Team array
    @return true if the given TeamMember is found in the Team array, false otherwise
    */
   
   public boolean contains(TeamMember m)
   {
	   int i;
	   for(i = 0; i < team.length; i++){
		   if(team[i] == m){
			   return true;
		   }
	   }
	   return false; 
   } 
   
   /**
    Prints all the names of a Team's TeamMembers along with their start date.
    */
   
   public void print()
   {
      //set up a for loop and call the toString() method
	   int i;
	   for(i = 0; i < team.length; i++){
		   if(team[i] != null){ ///////////
			  std.out.print(team[i].toString()); 
		   }
	   }
	   
    } 
}
